{"version":3,"sources":["img/food-truck.png","img/push-cart.png","component/map/truck-map.component.jsx","service/api-caller.service.js","component/search-box/search-box.component.jsx","component/select-box/select-box.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TruckMap","props","parseFoodItem","fooditems","split","join","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showWindow","onClose","state","getIcon","position","lat","location","lng","className","google","this","zoom","initialCenter","trucks","map","d","latitude","longitude","key","objectid","onClick","icon","facilitytype","maps","MarkerImage","truckImage","window","Size","cartImage","visible","applicant","locationdescription","href","target","rel","Component","GoogleApiWrapper","apiKey","ApiCaller","fetch","then","response","json","SearchBox","placeholder","handleChange","type","onChange","SelectBox","id","name","value","HomePage","getLocation","navigator","geolocation","getCurrentPosition","setPositionState","alert","event","searchInput","onSelect","selectValue","distance","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","Math","sin","cos","atan2","sqrt","Value","PI","currentLocation","apicaller","truckRef","React","createRef","fetchTrucks","filteredTrucks","filter","truck","toLowerCase","includes","ref","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd6b84e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/food-truck.a94d6f07.png\";","module.exports = __webpack_public_path__ + \"static/media/push-cart.94d7e2e8.png\";","import React, { Component } from 'react';\r\nimport \"./truck-map.style.scss\"\r\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\r\nimport truckImage from \"../../img/food-truck.png\";\r\nimport cartImage from \"../../img/push-cart.png\";\r\n\r\nclass TruckMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showWindow: false,\r\n            activeMarker: {},\r\n            selectedPlace: {\r\n                position: {\r\n                    lat: props.location.lat,\r\n                    lng: props.location.lng\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return <div className=\"map-container\">\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={16}\r\n                initialCenter={{\r\n                    lat: this.props.location.lat,\r\n                    lng: this.props.location.lng\r\n                }}>\r\n\r\n                <Marker position={{ lat: this.props.location.lat, lng: this.props.location.lng }} />\r\n                {\r\n                    this.props.trucks.map(d => (\r\n                        <Marker\r\n                            position={{ lat: d.latitude, lng: d.longitude }}\r\n                            key={d.objectid}\r\n                            onClick={this.onMarkerClick}\r\n                            icon={\r\n                                d.facilitytype === 'Truck' ? new this.props.google.maps.MarkerImage(\r\n                                    truckImage,\r\n                                    null, /* size is determined at runtime */\r\n                                    null, /* origin is 0,0 */\r\n                                    null, /* anchor is bottom center of the scaled image */\r\n                                    new window.google.maps.Size(25, 25)\r\n                                ) :\r\n                                    new this.props.google.maps.MarkerImage(\r\n                                        cartImage,\r\n                                        null, /* size is determined at runtime */\r\n                                        null, /* origin is 0,0 */\r\n                                        null, /* anchor is bottom center of the scaled image */\r\n                                        new window.google.maps.Size(25, 25)\r\n                                    )\r\n                            }\r\n                            {...d}\r\n                        />\r\n                    ))\r\n                }\r\n                <InfoWindow\r\n                    marker={this.state.activeMarker}\r\n                    visible={this.state.showWindow}\r\n                    onClose={this.onClose}>\r\n\r\n                    <div className=\"message\">\r\n                        <h4>{this.state.selectedPlace ? this.state.selectedPlace.applicant : \"\"}</h4>\r\n                        <h5 className=\"fooditems\">{this.state.selectedPlace ? this.parseFoodItem(this.state.selectedPlace.fooditems) : \"\"}</h5>\r\n                        <h6 className=\"location\">{this.state.selectedPlace ? this.state.selectedPlace.locationdescription : \"\"}</h6>\r\n                        <a href={`https://www.google.com/maps/dir/?api=1&origin=${this.props.location.lat},${this.props.location.lng}&destination=${this.state.selectedPlace.position.lat},${this.state.selectedPlace.position.lng}`}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\">Get Direction</a>\r\n                    </div>\r\n                </InfoWindow>\r\n            </Map>\r\n        </div >\r\n    }\r\n    parseFoodItem = (fooditems) => {\r\n        return fooditems ? fooditems.split(\":\").join(\" | \") : \"\";\r\n    }\r\n    onMarkerClick = (props, marker, e) => {\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showWindow: true\r\n        });\r\n    }\r\n\r\n    onClose = props => {\r\n        if (this.state.showWindow) {\r\n            this.setState({\r\n                showWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n\r\n    getIcon = (props) => {\r\n\r\n    }\r\n}\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyB7FLBGtiHmsV4pfleTY35haRoDEYcwlY4'\r\n})(TruckMap);\r\n\r\n","class ApiCaller {\r\n    fetchTrucks() {\r\n        return fetch(\"https://data.sfgov.org/resource/rqzj-sfat.json\").then(response => response.json())\r\n    }\r\n}\r\n\r\nexport default ApiCaller;","import React from \"react\";\r\nimport \"./search-box.style.scss\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        className=\"search searchBox\"\r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\nexport default SearchBox","import React from 'react'\r\nimport \"./select-box.style.scss\";\r\n\r\nconst SelectBox = ({ onChange }) => {\r\n    return <select id=\"foodType\" name=\"Facility-Type\" className=\"select\" onChange={onChange}>\r\n        <option value=\"\">All</option>\r\n        <option value=\"Truck\">Food-Truck</option>\r\n        <option value=\"Push Cart\">Push-Cart</option>\r\n    </select>\r\n}\r\nexport default SelectBox;","import React, { Component } from 'react';\r\nimport \"./homepage.style.scss\";\r\nimport TruckMap from '../../component/map/truck-map.component.jsx';\r\nimport ApiCaller from '../../service/api-caller.service';\r\nimport { SearchBox } from '../../component/search-box/search-box.component';\r\nimport SelectBox from '../../component/select-box/select-box.component';\r\n\r\n\r\nclass HomePage extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            trucks: [],\r\n            currentLocation: {\r\n                lat: 37.7749, lng: -122.4194\r\n            },\r\n            searchInput: \"\",\r\n            selectValue: \"\"\r\n        }\r\n        this.apicaller = new ApiCaller();\r\n        this.truckRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLocation();\r\n        this.apicaller.fetchTrucks().then(response => this.setState({\r\n            trucks: response\r\n        }));\r\n\r\n    }\r\n\r\n    getLocation = () => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.setPositionState);\r\n        } else {\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n    }\r\n\r\n    setPositionState = (position) => {\r\n        // this.setState({\r\n        //   location: {\r\n        //     lat: position.coords.latitude,\r\n        //     lng: position.coords.longitude\r\n        //   }\r\n        // })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            searchInput: event.target.value\r\n        })\r\n    }\r\n\r\n    onSelect = (event) => {\r\n        this.setState({\r\n            selectValue: event.target.value\r\n        })\r\n    }\r\n\r\n    distance = (lat1, lon1, lat2, lon2) => {\r\n        var R = 6371; // km\r\n        var dLat = this.toRad(lat2 - lat1);\r\n        var dLon = this.toRad(lon2 - lon1);\r\n        lat1 = this.toRad(lat1);\r\n        lat2 = this.toRad(lat2);\r\n\r\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        var d = R * c;\r\n        return d;\r\n    }\r\n\r\n    // Converts numeric degrees to radians\r\n    toRad = (Value) => {\r\n        return Value * Math.PI / 180;\r\n    }\r\n\r\n    render() {\r\n        const { trucks, currentLocation, searchInput, selectValue } = this.state\r\n        const filteredTrucks = trucks\r\n            .filter(truck => truck.fooditems && truck.fooditems.toLowerCase().includes(searchInput.toLowerCase()))\r\n            .filter(truck => truck.facilitytype && truck.facilitytype.toLowerCase().includes(selectValue.toLowerCase()))\r\n            .filter(truck => this.distance(currentLocation.lat, currentLocation.lng, truck.latitude, truck.longitude) <= 2);\r\n        return <div className=\"homepage\">\r\n            <div className=\"search-food\">\r\n                <SearchBox\r\n                    placeholder=\"Search Food Type\"\r\n                    handleChange={this.handleChange} />\r\n                <SelectBox onChange={this.onSelect} />\r\n            </div>\r\n            <TruckMap trucks={filteredTrucks} location={currentLocation} ref={this.truckRef} />\r\n\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\nimport './App.scss';\nimport HomePage from './pages/homepage/homepage.component';\n\nclass App extends Component {\n  render() {\n    return <div className=\"App\">\n      <HomePage />\n    </div>\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}